buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'groovy'

apply from: "gradle/properties.gradle"

group = project.ext.mod.group
version = project.ext.mod.version

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${project.ext.minecraft.version}-${project.ext.minecraft.modloader.version}"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.ext.minecraft.mcp.mappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html


    // Groovy
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: project.ext.groovy.version
    shadow group: 'org.codehaus.groovy', name: 'groovy', version: project.ext.groovy.version
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.ext.mod.version
    inputs.property "mcversion", project.ext.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.ext.mod.version, 'mcversion': project.ext.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

ext.getJarAppendix = {
    return "${ext.minecraft.version}-${ext.minecraft.modloader.name}"
}

ext.getJarVersion = {
    def version
    if (!project.hasProperty('release') || !project.getProperty('release')) {
        version = "${project.ext.mod.version}-SNAPSHOT"
    } else {
        version = project.ext.mod.version
        def release = project.getProperty('release')
        //Validate matching versions, with release starting with v as Github suggest for release tags
        if ("v${version}" != release) {
            throw new Exception("Release version '${release}' does not match committed version '${version}'")
        }
    }
    def buildNumber = project.hasProperty('build-number') ? '+' + project.getProperty('build-number') : ''
    return version + buildNumber
}

jar {
    baseName = project.ext.mod.id
    appendix = project.ext.getJarAppendix()
    version = project.ext.getJarVersion()
}

sourceJar {
    baseName = jar.baseName
    appendix = jar.appendix
    version = jar.version
}

shadowJar {
    baseName = jar.baseName
    appendix = jar.appendix
    version = jar.version
    classifier = ''
    configurations = [project.configurations.shadow]
}

jar.finalizedBy('reobfJar')
tasks.build.dependsOn shadowJar

artifacts {
    archives shadowJar
    archives jar
}
